/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { PDF417 } from './pdf417';
var Pdf417BarcodeComponent = /** @class */ (function () {
    function Pdf417BarcodeComponent() {
        this.text = '';
        this.opts = {};
        this.pdf417 = PDF417;
    }
    /**
     * @private
     * @return {?}
     */
    Pdf417BarcodeComponent.prototype.update = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var aspectratio = this.opts.aspect || 4;
        /** @type {?} */
        var errorcorrection = this.opts.errlvl || -1;
        /** @type {?} */
        var pixelheight = this.opts.pxh || 1;
        /** @type {?} */
        var pixelwidth = this.opts.pxw || 1
        /* update the barcode class */
        ;
        /* update the barcode class */
        this.pdf417.init(this.text, errorcorrection, aspectratio);
        /** @type {?} */
        var barcode = this.pdf417.getBarcodeArray();
        /* create a new canvas and get drawing context */
        /** @type {?} */
        var newcanvas = document.createElement('canvas');
        newcanvas.width = pixelwidth * barcode['num_cols'];
        newcanvas.height = pixelheight * barcode['num_rows'];
        /** @type {?} */
        var drawing = newcanvas.getContext('2d');
        /* print barcode pixels */
        /** @type {?} */
        var y = 0;
        /* for each row */
        for (var r = 0; r < barcode['num_rows']; ++r) {
            /** @type {?} */
            var x = 0;
            /* for each column */
            for (var c = 0; c < barcode['num_cols']; ++c) {
                if (barcode['bcode'][r][c] == 1 && drawing != null) {
                    drawing.fillRect(x, y, pixelwidth, pixelheight);
                }
                x += pixelwidth;
            }
            y += pixelheight;
        }
        /* replace canvas in container */
        /** @type {?} */
        var el = this.container.nativeElement;
        if (el.firstChild)
            el.removeChild(el.firstChild);
        el.appendChild(newcanvas);
    };
    /* handle init and changes of input data */
    /* handle init and changes of input data */
    /**
     * @return {?}
     */
    Pdf417BarcodeComponent.prototype.ngAfterViewInit = /* handle init and changes of input data */
    /**
     * @return {?}
     */
    function () { this.update(); };
    /**
     * @return {?}
     */
    Pdf417BarcodeComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () { this.update(); };
    Pdf417BarcodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'pdf417barcode',
                    template: "<div #container></div>"
                }] }
    ];
    Pdf417BarcodeComponent.propDecorators = {
        text: [{ type: Input }],
        opts: [{ type: Input }],
        container: [{ type: ViewChild, args: ['container',] }]
    };
    return Pdf417BarcodeComponent;
}());
export { Pdf417BarcodeComponent };
if (false) {
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.text;
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.opts;
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    Pdf417BarcodeComponent.prototype.pdf417;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmNDE3LWJhcmNvZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGRmNDE3LWJhcmNvZGUvIiwic291cmNlcyI6WyJsaWIvcGRmNDE3LWJhcmNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRXRGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEM7SUFBQTtRQU1XLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDbEIsU0FBSSxHQUFRLEVBQUUsQ0FBQztRQUdoQixXQUFNLEdBQUcsTUFBTSxDQUFDO0lBNkMxQixDQUFDOzs7OztJQTNDUyx1Q0FBTTs7OztJQUFkOztZQUVNLFdBQVcsR0FBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQU0sQ0FBQzs7WUFDbEQsZUFBZSxHQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFNLENBQUMsQ0FBQzs7WUFDbkQsV0FBVyxHQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBUyxDQUFDOztZQUNsRCxVQUFVLEdBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFTLENBQUM7UUFFdEQsOEJBQThCOztRQUE5Qiw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7O1lBQ3BELE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTs7O1lBR3ZDLFNBQVMsR0FBSyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxTQUFTLENBQUMsS0FBSyxHQUFLLFVBQVUsR0FBSSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsU0FBUyxDQUFDLE1BQU0sR0FBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztZQUNoRCxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztZQUd0QyxDQUFDLEdBQUcsQ0FBQztRQUNULGtCQUFrQjtRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFOztnQkFDeEMsQ0FBQyxHQUFHLENBQUM7WUFDVCxxQkFBcUI7WUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7b0JBQ2xELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELENBQUMsSUFBSSxVQUFVLENBQUM7YUFDakI7WUFDRCxDQUFDLElBQUksV0FBVyxDQUFDO1NBQ2xCOzs7WUFHSyxFQUFFLEdBQXNCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYTtRQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVO1lBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU1QixDQUFDO0lBRUQsMkNBQTJDOzs7OztJQUMzQyxnREFBZTs7OztJQUFmLGNBQW9CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Ozs7SUFDcEMsNENBQVc7OztJQUFYLGNBQWdCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7O2dCQXJEakMsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsd0JBQXdCO2lCQUNuQzs7O3VCQUdFLEtBQUs7dUJBQ0wsS0FBSzs0QkFDTCxTQUFTLFNBQUMsV0FBVzs7SUErQ3hCLDZCQUFDO0NBQUEsQUF2REQsSUF1REM7U0FuRFksc0JBQXNCOzs7SUFFakMsc0NBQTJCOztJQUMzQixzQ0FBd0I7O0lBQ3hCLDJDQUF1Qzs7Ozs7SUFFdkMsd0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUERGNDE3IH0gZnJvbSAnLi9wZGY0MTcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwZGY0MTdiYXJjb2RlJyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICNjb250YWluZXI+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBQZGY0MTdCYXJjb2RlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSB0ZXh0OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgb3B0czogYW55ID0ge307XG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicpIGNvbnRhaW5lcjogYW55O1xuXG4gIHByaXZhdGUgcGRmNDE3ID0gUERGNDE3O1xuXG4gIHByaXZhdGUgdXBkYXRlICgpOiB2b2lkIHtcblxuICAgIGxldCBhc3BlY3RyYXRpbyAgICAgOiBudW1iZXIgPSB0aGlzLm9wdHMuYXNwZWN0ICAgfHwgNDtcbiAgICBsZXQgZXJyb3Jjb3JyZWN0aW9uIDogbnVtYmVyID0gdGhpcy5vcHRzLmVycmx2bCAgIHx8IC0xO1xuICAgIGxldCBwaXhlbGhlaWdodCAgICAgOiBudW1iZXIgPSB0aGlzLm9wdHMucHhoICAgICAgfHwgMTtcbiAgICBsZXQgcGl4ZWx3aWR0aCAgICAgIDogbnVtYmVyID0gdGhpcy5vcHRzLnB4dyAgICAgIHx8IDFcblxuICAgIC8qIHVwZGF0ZSB0aGUgYmFyY29kZSBjbGFzcyAqL1xuICAgIHRoaXMucGRmNDE3LmluaXQodGhpcy50ZXh0LCBlcnJvcmNvcnJlY3Rpb24sIGFzcGVjdHJhdGlvKTtcbiAgICBjb25zdCBiYXJjb2RlID0gdGhpcy5wZGY0MTcuZ2V0QmFyY29kZUFycmF5KCk7XG5cbiAgICAvKiBjcmVhdGUgYSBuZXcgY2FudmFzIGFuZCBnZXQgZHJhd2luZyBjb250ZXh0ICovXG4gICAgY29uc3QgbmV3Y2FudmFzICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBuZXdjYW52YXMud2lkdGggICA9IHBpeGVsd2lkdGggICogYmFyY29kZVsnbnVtX2NvbHMnXTtcbiAgICBuZXdjYW52YXMuaGVpZ2h0ICA9IHBpeGVsaGVpZ2h0ICogYmFyY29kZVsnbnVtX3Jvd3MnXTtcbiAgICBjb25zdCBkcmF3aW5nID0gbmV3Y2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAvKiBwcmludCBiYXJjb2RlIHBpeGVscyAqL1xuICAgIHZhciB5ID0gMDtcbiAgICAvKiBmb3IgZWFjaCByb3cgKi9cbiAgICBmb3IgKHZhciByID0gMDsgciA8IGJhcmNvZGVbJ251bV9yb3dzJ107ICsrcikge1xuICAgICAgdmFyIHggPSAwO1xuICAgICAgLyogZm9yIGVhY2ggY29sdW1uICovXG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGJhcmNvZGVbJ251bV9jb2xzJ107ICsrYykge1xuICAgICAgICBpZiAoYmFyY29kZVsnYmNvZGUnXVtyXVtjXSA9PSAxICYmIGRyYXdpbmcgIT0gbnVsbCkge1xuICAgICAgICAgIGRyYXdpbmcuZmlsbFJlY3QoeCwgeSwgcGl4ZWx3aWR0aCwgcGl4ZWxoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHggKz0gcGl4ZWx3aWR0aDtcbiAgICAgIH1cbiAgICAgIHkgKz0gcGl4ZWxoZWlnaHQ7XG4gICAgfVxuXG4gICAgLyogcmVwbGFjZSBjYW52YXMgaW4gY29udGFpbmVyICovXG4gICAgY29uc3QgZWw6IEhUTUxDYW52YXNFbGVtZW50ID0gdGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwuZmlyc3RDaGlsZCkgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gICAgZWwuYXBwZW5kQ2hpbGQobmV3Y2FudmFzKTtcblxuICB9XG5cbiAgLyogaGFuZGxlIGluaXQgYW5kIGNoYW5nZXMgb2YgaW5wdXQgZGF0YSAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7IHRoaXMudXBkYXRlKCk7IH1cbiAgbmdPbkNoYW5nZXMoKSB7IHRoaXMudXBkYXRlKCk7IH1cblxufSJdfQ==