/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { PDF417 } from './pdf417';
export class Pdf417BarcodeComponent {
    constructor() {
        this.text = '';
        this.opts = {};
        this.pdf417 = PDF417;
    }
    /**
     * @private
     * @return {?}
     */
    update() {
        /** @type {?} */
        let aspectratio = this.opts.aspect || 4;
        /** @type {?} */
        let errorcorrection = this.opts.errlvl || -1;
        /** @type {?} */
        let pixelheight = this.opts.pxh || 1;
        /** @type {?} */
        let pixelwidth = this.opts.pxw || 1
        /* update the barcode class */
        ;
        /* update the barcode class */
        this.pdf417.init(this.text, errorcorrection, aspectratio);
        /** @type {?} */
        const barcode = this.pdf417.getBarcodeArray();
        /* create a new canvas and get drawing context */
        /** @type {?} */
        const newcanvas = document.createElement('canvas');
        newcanvas.width = pixelwidth * barcode['num_cols'];
        newcanvas.height = pixelheight * barcode['num_rows'];
        /** @type {?} */
        const drawing = newcanvas.getContext('2d');
        /* print barcode pixels */
        /** @type {?} */
        var y = 0;
        /* for each row */
        for (var r = 0; r < barcode['num_rows']; ++r) {
            /** @type {?} */
            var x = 0;
            /* for each column */
            for (var c = 0; c < barcode['num_cols']; ++c) {
                if (barcode['bcode'][r][c] == 1 && drawing != null) {
                    drawing.fillRect(x, y, pixelwidth, pixelheight);
                }
                x += pixelwidth;
            }
            y += pixelheight;
        }
        /* replace canvas in container */
        /** @type {?} */
        const el = this.container.nativeElement;
        if (el.firstChild)
            el.removeChild(el.firstChild);
        el.appendChild(newcanvas);
    }
    /* handle init and changes of input data */
    /**
     * @return {?}
     */
    ngAfterViewInit() { this.update(); }
    /**
     * @return {?}
     */
    ngOnChanges() { this.update(); }
}
Pdf417BarcodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'pdf417barcode',
                template: `<div #container></div>`
            }] }
];
Pdf417BarcodeComponent.propDecorators = {
    text: [{ type: Input }],
    opts: [{ type: Input }],
    container: [{ type: ViewChild, args: ['container',] }]
};
if (false) {
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.text;
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.opts;
    /** @type {?} */
    Pdf417BarcodeComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    Pdf417BarcodeComponent.prototype.pdf417;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmNDE3LWJhcmNvZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcGRmNDE3LWJhcmNvZGUvIiwic291cmNlcyI6WyJsaWIvcGRmNDE3LWJhcmNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRXRGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFNbEMsTUFBTSxPQUFPLHNCQUFzQjtJQUpuQztRQU1XLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDbEIsU0FBSSxHQUFRLEVBQUUsQ0FBQztRQUdoQixXQUFNLEdBQUcsTUFBTSxDQUFDO0lBNkMxQixDQUFDOzs7OztJQTNDUyxNQUFNOztZQUVSLFdBQVcsR0FBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQU0sQ0FBQzs7WUFDbEQsZUFBZSxHQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFNLENBQUMsQ0FBQzs7WUFDbkQsV0FBVyxHQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBUyxDQUFDOztZQUNsRCxVQUFVLEdBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFTLENBQUM7UUFFdEQsOEJBQThCOztRQUE5Qiw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7O2NBQ3BELE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTs7O2NBR3ZDLFNBQVMsR0FBSyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxTQUFTLENBQUMsS0FBSyxHQUFLLFVBQVUsR0FBSSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsU0FBUyxDQUFDLE1BQU0sR0FBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztjQUNoRCxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztZQUd0QyxDQUFDLEdBQUcsQ0FBQztRQUNULGtCQUFrQjtRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFOztnQkFDeEMsQ0FBQyxHQUFHLENBQUM7WUFDVCxxQkFBcUI7WUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7b0JBQ2xELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELENBQUMsSUFBSSxVQUFVLENBQUM7YUFDakI7WUFDRCxDQUFDLElBQUksV0FBVyxDQUFDO1NBQ2xCOzs7Y0FHSyxFQUFFLEdBQXNCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYTtRQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVO1lBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU1QixDQUFDOzs7OztJQUdELGVBQWUsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O0lBQ3BDLFdBQVcsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7WUFyRGpDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFLHdCQUF3QjthQUNuQzs7O21CQUdFLEtBQUs7bUJBQ0wsS0FBSzt3QkFDTCxTQUFTLFNBQUMsV0FBVzs7OztJQUZ0QixzQ0FBMkI7O0lBQzNCLHNDQUF3Qjs7SUFDeEIsMkNBQXVDOzs7OztJQUV2Qyx3Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQREY0MTcgfSBmcm9tICcuL3BkZjQxNyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BkZjQxN2JhcmNvZGUnLFxuICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRhaW5lcj48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIFBkZjQxN0JhcmNvZGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBvcHRzOiBhbnkgPSB7fTtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJykgY29udGFpbmVyOiBhbnk7XG5cbiAgcHJpdmF0ZSBwZGY0MTcgPSBQREY0MTc7XG5cbiAgcHJpdmF0ZSB1cGRhdGUgKCk6IHZvaWQge1xuXG4gICAgbGV0IGFzcGVjdHJhdGlvICAgICA6IG51bWJlciA9IHRoaXMub3B0cy5hc3BlY3QgICB8fCA0O1xuICAgIGxldCBlcnJvcmNvcnJlY3Rpb24gOiBudW1iZXIgPSB0aGlzLm9wdHMuZXJybHZsICAgfHwgLTE7XG4gICAgbGV0IHBpeGVsaGVpZ2h0ICAgICA6IG51bWJlciA9IHRoaXMub3B0cy5weGggICAgICB8fCAxO1xuICAgIGxldCBwaXhlbHdpZHRoICAgICAgOiBudW1iZXIgPSB0aGlzLm9wdHMucHh3ICAgICAgfHwgMVxuXG4gICAgLyogdXBkYXRlIHRoZSBiYXJjb2RlIGNsYXNzICovXG4gICAgdGhpcy5wZGY0MTcuaW5pdCh0aGlzLnRleHQsIGVycm9yY29ycmVjdGlvbiwgYXNwZWN0cmF0aW8pO1xuICAgIGNvbnN0IGJhcmNvZGUgPSB0aGlzLnBkZjQxNy5nZXRCYXJjb2RlQXJyYXkoKTtcblxuICAgIC8qIGNyZWF0ZSBhIG5ldyBjYW52YXMgYW5kIGdldCBkcmF3aW5nIGNvbnRleHQgKi9cbiAgICBjb25zdCBuZXdjYW52YXMgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIG5ld2NhbnZhcy53aWR0aCAgID0gcGl4ZWx3aWR0aCAgKiBiYXJjb2RlWydudW1fY29scyddO1xuICAgIG5ld2NhbnZhcy5oZWlnaHQgID0gcGl4ZWxoZWlnaHQgKiBiYXJjb2RlWydudW1fcm93cyddO1xuICAgIGNvbnN0IGRyYXdpbmcgPSBuZXdjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIC8qIHByaW50IGJhcmNvZGUgcGl4ZWxzICovXG4gICAgdmFyIHkgPSAwO1xuICAgIC8qIGZvciBlYWNoIHJvdyAqL1xuICAgIGZvciAodmFyIHIgPSAwOyByIDwgYmFyY29kZVsnbnVtX3Jvd3MnXTsgKytyKSB7XG4gICAgICB2YXIgeCA9IDA7XG4gICAgICAvKiBmb3IgZWFjaCBjb2x1bW4gKi9cbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgYmFyY29kZVsnbnVtX2NvbHMnXTsgKytjKSB7XG4gICAgICAgIGlmIChiYXJjb2RlWydiY29kZSddW3JdW2NdID09IDEgJiYgZHJhd2luZyAhPSBudWxsKSB7XG4gICAgICAgICAgZHJhd2luZy5maWxsUmVjdCh4LCB5LCBwaXhlbHdpZHRoLCBwaXhlbGhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgeCArPSBwaXhlbHdpZHRoO1xuICAgICAgfVxuICAgICAgeSArPSBwaXhlbGhlaWdodDtcbiAgICB9XG5cbiAgICAvKiByZXBsYWNlIGNhbnZhcyBpbiBjb250YWluZXIgKi9cbiAgICBjb25zdCBlbDogSFRNTENhbnZhc0VsZW1lbnQgPSB0aGlzLmNvbnRhaW5lci5uYXRpdmVFbGVtZW50O1xuICAgIGlmIChlbC5maXJzdENoaWxkKSBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcbiAgICBlbC5hcHBlbmRDaGlsZChuZXdjYW52YXMpO1xuXG4gIH1cblxuICAvKiBoYW5kbGUgaW5pdCBhbmQgY2hhbmdlcyBvZiBpbnB1dCBkYXRhICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHsgdGhpcy51cGRhdGUoKTsgfVxuICBuZ09uQ2hhbmdlcygpIHsgdGhpcy51cGRhdGUoKTsgfVxuXG59Il19